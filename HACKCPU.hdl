CHIP HACKCPU
{
    IN inM[16],instruction[16],reset;
    OUT outM[16],pc[15],addressM[15],writeM;

    PARTS:
    //giving instruction bus and output from the ALU as inputs for the mux with select line as the most significant bit of instruction bus
    MUX16b2to1(a=instruction,b=outALU,c=instruction[15],out=outMux1);
    //writeM,writeD,instruction writeA are obtained using the AND operation of respective bits in instruction bit with most significant bit in the instructionbus
    And(a=instruction[3],b=instruction[15],out=writeM);
    And(a=instruction[4],b=instruction[15],out=writeD);
    And(a=instruction[5],b=instruction[15],out=insWriteA);
    //negation of msb in instruction bus being the addWriteA bit
    Not(in=instruction[15],out=addWriteA);
    //writeA being the OR operation between both the instruction and add writeA's
    Or(a=insWriteA,b=addWriteA,out=writeA);
    //Aregister taking the output of MUX1 as input with writeA as load and giving output addressM which is also duplicated into outRegA
    ARegister(in=outMux1,load=writeA,out[0..14]=addressM,out=outRegA);
    MUX16b2to1(a=outRegA,b=inM,c=instruction[12],out=outMux2);
    //Dregister chip
    DRegister(in=outALU,load=writeD,out=outRegD);
    //ALU with appropriate input pins from instruction bus
    ALU(zx=instruction[11],nx=instruction[10],zy=instruction[9],ny=instruction[8],f=instruction[7],no=instruction[6],x=outRegD,y=outMux2,out=outALU,out=outM,zr=zero,ng=negative);
    //for determining jumps
    Not(in=zero,out=notZero);
    Not(in=negative,out=notNegative);
    And(a=notZero,b=notNegative,out=positive);
    And(a=instruction[0],b=instruction[15],out=insJumpPos);
    And(a=instruction[1],b=instruction[15],out=insJumpZero);
    And(a=instruction[2],b=instruction[15],out=insJumpNeg);
    And(a=insJumpNeg,b=negative,out=JumpNeg);
    And(a=insJumpPos,b=positive,out=JumpPos);
    And(a=insJumpZero,b=zero,out=JumpZero);
    Or(a=JumpPos,b=JumpZero,out=jump1);
    Or(a=jump1,b=JumpNeg,out=jump2);
    Not(in=jump2,out=notjump2);
    //Programming counter
    PC(in=outRegA,load=jump2,inc=notjump2,reset=reset,out[0..14]=pc);
}